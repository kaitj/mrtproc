# ---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids


configfile: "config/snakebids.yml"


# writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"],
    )
)


# this adds constraints to the bids naming
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),


# ---- end snakebids boilerplate ------------------------------------------------

# Mrtrix3 citation (additional citations are included per rule as necessary):
# Tournier, J.-D.; Smith, R. E.; Raffelt, D.; Tabbara, R.; Dhollander, T.; Pietsch, M.; Christiaens, D.; Jeurissen, B.; Yeh, C.-H. & Connelly, A. MRtrix3: A fast, flexible and open software framework for medical image processing and visualisation. NeuroImage, 2019, 202, 116137

#----------- MRTRIX PREPROC BEGIN ------------#
rule nii2mif:
    input:
        dwi=bids(
            root=join(config["bids_dir"], 'derivatives/prepdwi'),
            datatype='dwi',
            suffix='dwi.nii.gz',
            space='T1w',
            **config['subj_wildcards'],
        )
        bval=bids(
            root=join(config["bids_dir"], 'derivatives/prepdwi'),
            datatype='dwi',
            suffix='dwi.bvec',
            space='T1w',
            **config['subj_wildcards'],
        )
        bval=bids(
            root=join(config["bids_dir"], 'derivatives/prepdwi'),
            datatype='dwi',
            suffix='dwi.bval',
            space='T1w',
            **config['subj_wildcards'],
        )
        mask=bids(
            root=join(config["bids_dir"], 'derivatives/prepdwi'),
            datatype='dwi',
            suffix='dwi_brainmask.nii.gz',
            space='T1w',
            **config['subj_wildcards'],
        )
    params:
        nthreads=workflow.cores
    output:
        dwi=bids(
            root=join(config["out_dir"], 'mrtrix')
            datatype='dwi',
            suffix='dwi.mif'
            space='T1w',
            **config['subj_wildcards'],
        )
        mask=bids(
            root=join(config["out_dir"], 'mrtrix')
            datatype='dwi',
            suffix='dwi_brainmask.mif'
            space='T1w',
            **config['subj_wildcards'],
        )
    container:
        config['singularity']['mrtrix']
    shell:
        'mrconvert {input.dwi} {output.dwi} -fslgrad {input.bvec} {input.bval} -nthreads {params.nthreads}'
        'mrconvert {input.mask} {output.mask} -nthreads {params.nthreads}'

rule dwi2response:
    # Dhollander, T.; Mito, R.; Raffelt, D. & Connelly, A. Improved white matter response function estimation for 3-tissue constrained spherical deconvolution. Proc Intl Soc Mag Reson Med, 2019, 555
    input:
        dwi=rules.nii2mif.output.dwi,
        mask=rules.nii2mif.output.mask,
    params:
        shell=config.get('shells', ''),
        lmax=config.get('lmax', ''),
        threads=workflow.cores,
    output:
        wm_rf=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='wm',
            suffix='response.txt',
            **config['subj_wildcards'],
        )
        gm_rf=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='gm',
            suffix='response.txt',
            **config['subj_wildcards'],
        )
        csf_rf=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='csf',
            suffix='response.txt',
            **config['subj_wildcards'],
        )
    container:
        config['singularity']['mrtrix']
    shell:
        'if [ {params.shell} == "" ] && [ {params.lmax} == "" ]; then'
        '  dwi2response dhollander {input.dwi} {output.wm_rf} {output.gm_rf} {output.csf_rf} -fslgrad {input.bvec} {input.bval} -nthreads {params.nthreads} -mask {input.mask} '
        'else '
        '  dwi2response dhollander {input.dwi} {output.wm_rf} {output.gm_rf} {output.csf_rf} -fslgrad {input.bvec} {input.bval} -nthreads {params.nthreads} -shell {params.shell} -lmax {params.lmax} -mask {input.mask}'
        'fi'
        ''


rule dwi2fod:
    # Jeurissen, B; Tournier, J-D; Dhollander, T; Connelly, A & Sijbers, J. Multi-tissue constrained spherical deconvolution for improved analysis of multi-shell diffusion MRI data. NeuroImage, 2014, 103, 411-426
    input:
        dwi=rules.nii2mif.output.dwi,
        mask=rules.nii2mif.output.mask,
        wm_rf=rules.dwi2response.output.wm_rf,
        gm_rf=rules.dwi2response.output.gm_rf,
        csf_rf=rules.dwi2response.output.gm_rf,
    params:
        shell=config.get('shells', ''),
        lmax=config.get('lmax', ''),
        nthreads=workflow.cores,
    output:
        wm_fod=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='wm',
            suffix='fod.mif'
        ),
        gm_fod=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='gm',
            suffix='fod.mif'
        ),
        csf_fod=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='csf',
            suffix='fod.mif'
        ),
    container:
        config['singularity']['mrtrix']
    shell:
        'if [ {params.shell} == "" ] && [ {params.lmax} == "" ]; then'
        '  dwi2fod -nthreads {params.threads} -mask {input.mask} msmt_csd {input.dwi} {input.wm_rf} {output.wm_fod} {input.gm_rf} {output.gm_fod} {input.csf_rf} {output.csf_fod} '
        'else '
        '  dwi2fod -nthreads {params.threads} -mask {input.mask} -shell {params.shell} -lmax {params.lmax} msmt_csd {input.dwi} {input.wm_rf} {output.wm_fod} {input.gm_rf} {output.gm_fod} {input.csf_rf} {output.csf_fod} '
        'fi'

rule mtnormalise:
    # Raffelt, D.; Dhollander, T.; Tournier, J.-D.; Tabbara, R.; Smith, R. E.; Pierre, E. & Connelly, A. Bias Field Correction and Intensity Normalisation for Quantitative Analysis of Apparent Fibre Density. In Proc. ISMRM, 2017, 26, 3541
    # Dhollander, T.; Tabbara, R.; Rosnarho-Tornstrand, J.; Tournier, J.-D.; Raffelt, D. & Connelly, A. Multi-tissue log-domain intensity and inhomogeneity normalisation for quantitative apparent fibre density. In Proc. ISMRM, 2021, 29, 2472
    input:
        wm_fod=rules.dwi2fod.output.wm_fod,
        gm_fod=rules.dwi2fod.output.gm_fod,
        csf_fod=rules.dwi2fod.output.csf_fod,
        mask=rules.nii2mif.output.mask,
    params:
        nthreads=workflow.cores,
    output:
        wm_fod_norm=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='normalized',
            suffix='wm_fod.mif'
        ),
        gm_fod=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='normalized',
            suffix='gm_fod.mif'
        ),
        csf_fod=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='response',
            space='T1w',
            desc='normalized',
            suffix='csf_fod.mif'
        ),
    container:
        config['singularity']['mrtrix']
    shell:
        'mtnormalise -nthreads {params.nthreads}  -mask {input.mask} {input.wm_fod} {output.wm_fod_norm} {input.gm_fod} {output.gm_fod_norm} {input.csf_fod} {output.csf_fod_norm}'

#-------------- MRTRIX PREPROC END ----------------#

#----------- MRTRIX TRACTOGRAPHY BEGIN ------------#
rule tckgen:
    # Tournier, J.-D.; Calamante, F. & Connelly, A. Improved probabilistic streamlines tractography by 2nd order integration over fibre orientation distributions. Proceedings of the International Society for Magnetic Resonance in Medicine, 2010, 1670
    input:
        wm_fod=rules.mtnormalise.output.wm_fod_norm,
        dwi=rules.nii2mif.output.dwi,
        mask=rules.nii2mif.output.brainmask,
    params:
        streamlines=config['sl_count']
        nthreads=workflow.cores,
    output:
        tck=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='tractography',
            space='T1w',
            desc='iFOD2',
            suffix='tractography.tck'
        )
    container:
        config['singularity']['mrtrix']
    shell:
        'tckgen -nthreads {params.nthreads} -algorithm iFOD2 -mask {input.mask} -select {params.streamlines} {input.wm_fod} {output.tck}'


rule tcksift2:
    # Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT2: Enabling dense quantitative assessment of brain white matter connectivity using streamlines tractography. NeuroImage, 2015, 119, 338-351
    input:
        wm_fod=rules.mtnormalise.output.wm_fod_norm,
        tck=rules.tckgen.output.tck,
    params:
        nthreads=workflow.cores,
    output:
        tckweights=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='tractography',
            space='T1w',
            desc='sift2',
            suffix='tckweights.txt'
        )
        mu=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='tractography',
            space='T1w',
            desc='sift2',
            suffix='mu.txt'
        )
    container:
        config['singularity']['mrtrix']
    shell:
        'tckgen -nthreads {params.nthreads} -out_mu {output.mu} {input.tck} {input.wm_fod} {output.tckweights}'


rule tck2connectome:
    # Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. The effects of SIFT on the reproducibility and biological accuracy of the structural connectome. NeuroImage, 2015, 104, 253-265
    input:
        tckweights=rules.tcksift2.output.tckweights,
        tck=rules.tckgen.output.tck,
        parcellation=config['parcellation']
    params:
        nthreads=workflow.cores,
    output:
        sl_assignment=bids(
                root=join(config['out_dir'], 'mrtrix'),
                datatype='tractography',
                space='T1w',
                suffix='slAssignment.txt'
        ),
        conn=bids(
            root=join(config['out_dir'], 'mrtrix'),
            datatype='tractography',
            space='T1w',
            suffix='conn.csv'
        )
    container:
        config['singularity']['mrtrix']
    shell:
        'tck2connectome -nthreads {params.nthreads} -tck_weights_in {input.tckweights} -out_assignments {output.sl_assignment} -zero_diagonal -symmetric {input.tck} {input.parcellation} {output.conn}

#----------- MRTRIX TRACTOGRAPHY END ------------#
