# ---- begin snakebids boilerplate ----------------------------------------------

import snakebids
from snakebids import bids
from os.path import join

configfile: "config/snakebids.yml"

# writes inputs_config.yml and updates config dict
config.update(
    snakebids.generate_inputs(
        bids_dir=config["bids_dir"],
        pybids_inputs=config["pybids_inputs"],
        derivatives=config["derivatives"],
        participant_label=config["participant_label"],
        exclude_participant_label=config["exclude_participant_label"],
    )
)


# this adds constraints to the bids naming
wildcard_constraints:
    **snakebids.get_wildcard_constraints(config["pybids_inputs"]),


root = os.path.join(config["root"], "mrtrix")

# ---- end snakebids boilerplate ------------------------------------------------

# Mrtrix3 citation (additional citations are included per rule as necessary):
# Tournier, J.-D.; Smith, R. E.; Raffelt, D.; Tabbara, R.; Dhollander, T.; Pietsch, M.; Christiaens, D.; Jeurissen, B.; Yeh, C.-H. & Connelly, A. MRtrix3: A fast, flexible and open software framework for medical image processing and visualisation. NeuroImage, 2019, 202, 116137


threads: 8

rule all:
    input:
        expand(
            bids(
            root=root,
            datatype='tractography',
            suffix='conn.csv',
            **config['subj_wildcards'],
        ),
        subject=config['subjects'])

#----------- MRTRIX PREPROC BEGIN ------------#
rule nii2mif:
    input:
        dwi=config["input_path"]["dwi"],
        bval=lambda wildcards: re.sub(".nii.gz", '.bval', config["input_path"]["dwi"]),
        bvec=lambda wildcards: re.sub(".nii.gz", '.bvec', config["input_path"]["dwi"]),
        mask=config['input_path']['mask']
    output:
        dwi=bids(
            root=root,
            datatype='dwi',
            suffix='dwi.mif',
            **config['subj_wildcards'],
        ),
        mask=bids(
            root=root,
            datatype='dwi',
            suffix='mask.mif',
            **config['subj_wildcards'],
        )
    threads: workflow.cores
    group: "subj1"
    container:
        config['singularity']['mrtrix']
    shell:
        'mrconvert {input.dwi} {output.dwi} -fslgrad {input.bvec} {input.bval} -nthreads {threads} && '
        'mrconvert {input.mask} {output.mask} -nthreads {threads}'

rule dwi2response:
    # Dhollander, T.; Mito, R.; Raffelt, D. & Connelly, A. Improved white matter response function estimation for 3-tissue constrained spherical deconvolution. Proc Intl Soc Mag Reson Med, 2019, 555
    input:
        dwi=rules.nii2mif.output.dwi,
        mask=rules.nii2mif.output.mask,
        bval=lambda wildcards: re.sub(".nii.gz", '.bval', config["input_path"]["dwi"]),
        bvec=lambda wildcards: re.sub(".nii.gz", '.bvec', config["input_path"]["dwi"]),
    params:
        shells=','.join(config['shells']),
        lmax=','.join(config['lmax'])
    output:
        wm_rf=bids(
            root=root,
            datatype='response',
            desc='wm',
            suffix='response.txt',
            **config['subj_wildcards'],
        ),
        gm_rf=bids(
            root=root,
            datatype='response',
            desc='gm',
            suffix='response.txt',
            **config['subj_wildcards'],
        ),
        csf_rf=bids(
            root=root,
            datatype='response',
            desc='csf',
            suffix='response.txt',
            **config['subj_wildcards'],
        )
    threads: workflow.cores
    group: "subj1"
    container:
        config['singularity']['mrtrix']
    shell:
        'dwi2response dhollander {input.dwi} {output.wm_rf} {output.gm_rf} {output.csf_rf} -fslgrad {input.bvec} {input.bval} -nthreads {threads} -shells {params.shells} -lmax {params.lmax} -mask {input.mask}'

rule responsemean:
    input: 
        wm_rf=expand(
            rules.dwi2response.output.wm_rf, subject=config['subjects']
        ),
        gm_rf=expand(
            rules.dwi2response.output.gm_rf, subject=config['subjects']
        ),
        csf_rf=expand(
            rules.dwi2response.output.csf_rf, subject=config['subjects']
        )
    output: 
        wm_avg_rf=bids(
            root=join(root, 'avg'),
            datatype='response',
            desc='wm',
            suffix='response.txt'
        ),
        gm_avg_rf=bids(
            root=join(root, 'avg'),
            datatype='response',
            desc='gm',
            suffix='response.txt'
        ),
        csf_avg_rf=bids(
            root=join(root, 'avg'),
            datatype='response',
            desc='csf',
            suffix='response.txt'
        )
    threads: workflow.cores
    group: "group"
    container:
        config['singularity']['mrtrix']
    shell:
        'responsemean {input.wm_rf} {output.wm_avg_rf} -nthreads {threads} &&'
        'responsemean {input.gm_rf} {output.gm_avg_rf} -nthreads {threads} &&'
        'responsemean {input.csf_rf} {output.csf_avg_rf} -nthreads {threads}'

rule dwi2fod:
    # Jeurissen, B; Tournier, J-D; Dhollander, T; Connelly, A & Sijbers, J. Multi-tissue constrained spherical deconvolution for improved analysis of multi-shell diffusion MRI data. NeuroImage, 2014, 103, 411-426
    input:
        dwi=rules.nii2mif.output.dwi,
        mask=rules.nii2mif.output.mask,
        wm_rf=rules.responsemean.output.wm_avg_rf,
        gm_rf=rules.responsemean.output.gm_avg_rf,
        csf_rf=rules.responsemean.output.csf_avg_rf,
    params:
        shells=','.join(config['shells']),
    output:
        wm_fod=bids(
            root=root,
            datatype='response',
            desc='wm',
            suffix='fod.mif',
            **config['subj_wildcards'],
        ),
        gm_fod=bids(
            root=root,
            datatype='response',
            desc='gm',
            suffix='fod.mif',
            **config['subj_wildcards'],
        ),
        csf_fod=bids(
            root=root,
            datatype='response',
            desc='csf',
            suffix='fod.mif',
            **config['subj_wildcards'],
        ),
    threads: workflow.cores
    group: "subj2"
    container:
        config['singularity']['mrtrix']
    shell:
        'dwi2fod -nthreads {threads} -mask {input.mask} -shell {params.shells} msmt_csd {input.dwi} {input.wm_rf} {output.wm_fod} {input.gm_rf} {output.gm_fod} {input.csf_rf} {output.csf_fod} '

rule mtnormalise:
    # Raffelt, D.; Dhollander, T.; Tournier, J.-D.; Tabbara, R.; Smith, R. E.; Pierre, E. & Connelly, A. Bias Field Correction and Intensity Normalisation for Quantitative Analysis of Apparent Fibre Density. In Proc. ISMRM, 2017, 26, 3541
    # Dhollander, T.; Tabbara, R.; Rosnarho-Tornstrand, J.; Tournier, J.-D.; Raffelt, D. & Connelly, A. Multi-tissue log-domain intensity and inhomogeneity normalisation for quantitative apparent fibre density. In Proc. ISMRM, 2021, 29, 2472
    input:
        wm_fod=rules.dwi2fod.output.wm_fod,
        gm_fod=rules.dwi2fod.output.gm_fod,
        csf_fod=rules.dwi2fod.output.csf_fod,
        mask=rules.nii2mif.output.mask,
    output:
        wm_fod=bids(
            root=root,
            datatype='response',
            desc='normalized',
            suffix='wm_fod.mif',
            **config['subj_wildcards'],
        ),
        gm_fod=bids(
            root=root,
            datatype='response',
            desc='normalized',
            suffix='gm_fod.mif',
            **config['subj_wildcards'],
        ),
        csf_fod=bids(
            root=root,
            datatype='response',
            desc='normalized',
            suffix='csf_fod.mif',
            **config['subj_wildcards'],
        ),
    threads: workflow.cores
    group: "subj2"
    container:
        config['singularity']['mrtrix']
    shell:
        'mtnormalise -nthreads {threads} -mask {input.mask} {input.wm_fod} {output.wm_fod} {input.gm_fod} {output.gm_fod} {input.csf_fod} {output.csf_fod}'

rule dwi2tensor:
    input:
        rules.nii2mif.output.dwi
    output:
        tensor=bids(
            root=root,
            datatype='dwi',
            suffix='tensor.mif',
            **config['subj_wildcards'],
        )
    group: "subj1"
    shell:
        'dwi2tensor {input} {output}'       

rule tensor2metrics:
    input:
        tensor=rules.dwi2tensor.output.tensor,
        mask=rules.nii2mif.output.mask
    output:
        fa=bids(
            root=root,
            datatype='dwi',
            suffix='fa.mif',
            **config['subj_wildcards'],
        )
    group: "subj1"
    shell:
        'tensor2metric -fa {output.fa} -mask {input.mask} {input.tensor}'       

#-------------- MRTRIX PREPROC END ----------------#

#----------- MRTRIX TRACTOGRAPHY BEGIN ------------#
rule create_seed:
    input: 
        rules.tensor2metrics.output.fa
    params:
        threshold=0.15
    output:
        seed=bids(
            root=root,
            datatype='tractography',
            suffix='seed.mif',
            **config['subj_wildcards'],
        )
    group: "subj2"
    shell: 'mrthreshold {input} -abs {params.threshold} {output}'


rule tckgen:
    # Tournier, J.-D.; Calamante, F. & Connelly, A. Improved probabilistic streamlines tractography by 2nd order integration over fibre orientation distributions. Proceedings of the International Society for Magnetic Resonance in Medicine, 2010, 1670
    input:
        wm_fod=rules.mtnormalise.output.wm_fod,
        dwi=rules.nii2mif.output.dwi,
        mask=rules.nii2mif.output.mask,
        seed=rules.create_seed.output.seed
    params:
        streamlines=config['sl_count'],
        seed_strategy=lambda wildcards,input: f'-seed_image {input.seed}'
    output:
        tck=bids(
            root=root,
            datatype='tractography',
            desc='iFOD2',
            suffix='tractography.tck',
            **config['subj_wildcards'],
        )
    threads: workflow.cores
    group: "subj2"
    container:
        config['singularity']['mrtrix']
    shell:
        'tckgen -nthreads {threads} -algorithm iFOD2 -mask {input.mask} {params.seed_strategy} -select {params.streamlines} {input.wm_fod} {output.tck}'


rule tcksift2:
    # Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. SIFT2: Enabling dense quantitative assessment of brain white matter connectivity using streamlines tractography. NeuroImage, 2015, 119, 338-351
    input:
        wm_fod=rules.mtnormalise.output.wm_fod,
        tck=rules.tckgen.output.tck,
    output:
        tckweights=bids(
            root=root,
            datatype='tractography',
            desc='sift2',
            suffix='tckweights.txt',
            **config['subj_wildcards'],
        ),
        mu=bids(
            root=root,
            datatype='tractography',
            desc='sift2',
            suffix='mu.txt',
            **config['subj_wildcards'],
        )
    threads: workflow.cores,
    group: "subj2"
    container:
        config['singularity']['mrtrix']
    shell:
        'tcksift2 -nthreads {threads} -out_mu {output.mu} {input.tck} {input.wm_fod} {output.tckweights}'


rule tck2connectome:
    # Smith, R. E.; Tournier, J.-D.; Calamante, F. & Connelly, A. The effects of SIFT on the reproducibility and biological accuracy of the structural connectome. NeuroImage, 2015, 104, 253-265
    input:
        tckweights=rules.tcksift2.output.tckweights,
        tck=rules.tckgen.output.tck,
        parcellation=config['parcellation']
    output:
        sl_assignment=bids(
                root=root,
                datatype='tractography',
                suffix='slAssignment.txt',
            **config['subj_wildcards'],
        ),
        conn=bids(
            root=root,
            datatype='tractography',
            suffix='conn.csv',
            **config['subj_wildcards'],
        )
    threads: workflow.cores
    group: "subj2"
    container:
        config['singularity']['mrtrix']
    shell:
        'tck2connectome -nthreads {threads} -tck_weights_in {input.tckweights} -out_assignments {output.sl_assignment} -zero_diagonal -symmetric {input.tck} {input.parcellation} {output.conn}'

#----------- MRTRIX TRACTOGRAPHY END ------------#
